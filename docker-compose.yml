services:
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile.app
    volumes:
      - .:/usr/src/app
    depends_on:
      - postgres
      - prefect
    environment:
      PREFECT_API_URL: ${PREFECT_API_URL}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DEFAULT_USER_PASSWORD: ${POSTGRES_DEFAULT_USER_PASSWORD}
    networks:
      - backend
    labels:
      - "traefik.enable=false"

  postgres:
    image: postgres:17
    restart: always
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # This variable holds the comma-separated list of databases to create.
      # e.g POSTGRES_MULTIPLE_DATABASES: db1,db2,db3
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_MULTIPLE_DATABASES}
      POSTGRES_DEFAULT_USER_PASSWORD: ${POSTGRES_DEFAULT_USER_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
      - ./docker/init-schema.sql:/docker-entrypoint-initdb.d/init-schema.sql
    networks:
      - backend
    labels:
      - "traefik.enable=false"

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.maltem.site`)"
      - "traefik.docker.network=traefik"
      - "traefik.http.routers.pgadmin.entrypoints=websecure"
      - "traefik.http.routers.pgadmin.tls.certresolver=letsencrypt"
      - "traefik.http.routers.pgadmin.tls=true"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"
    networks:
      - traefik
      - backend

  prefect:
    image: prefecthq/prefect:2-python3.12
    environment:
      PREFECT_API_URL: ${PREFECT_API_URL}
    volumes:
      - prefect-data:/root/.prefect
    command: prefect server start --host 0.0.0.0
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prefect.rule=Host(`prefect.maltem.site`)"
      - "traefik.docker.network=traefik"
      - "traefik.http.routers.prefect.entrypoints=websecure"
      - "traefik.http.routers.prefect.tls.certresolver=letsencrypt"
      - "traefik.http.routers.prefect.tls=true"
      - "traefik.http.services.prefect.loadbalancer.server.port=4200"
      # Gebruik bestaande Traefik BasicAuth middleware (zelfde als dashboard)
      - "traefik.http.routers.prefect.middlewares=auth"
    networks:
      - traefik
      - backend  # App container kan nu met Prefect communiceren

  # Prefect agent for volume-mounted code execution
  # Note: Agents are deprecated but work better with LocalFileSystem storage
  agent:
    build:
      context: .
      dockerfile: docker/Dockerfile.app
    depends_on:
      - prefect
      - postgres
    environment:
      PREFECT_API_URL: ${PREFECT_API_URL}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DEFAULT_USER_PASSWORD: ${POSTGRES_DEFAULT_USER_PASSWORD}
    volumes:
      - .:/usr/src/app  # Mount code so agent can access it
    working_dir: /usr/src/app
    command: prefect agent start -q default
    networks:
      - backend
    labels:
      - "traefik.enable=false"
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.app
    depends_on:
      - postgres
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DEFAULT_USER_PASSWORD: ${POSTGRES_DEFAULT_USER_PASSWORD}
    volumes:
      - .:/usr/src/app
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000
    # API is NIET publiek toegankelijk - alleen via interne frontend network
    # Voor development: gebruik REACT_APP_API_URL=http://api:8000 (interne Docker URL)
    # Voor production: frontend nginx proxyt /api naar http://api:8000
    networks:
      - frontend
      - backend
    labels:
      - "traefik.enable=false"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: news-ai-frontend
    depends_on:
      - api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`maltem.site`)"
      - "traefik.docker.network=traefik"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    networks:
      - traefik
      - frontend

volumes:
  postgres_data:
  prefect-data:

networks:
  frontend:
    internal: false
  backend:
    internal: false  # Moet false zijn zodat app container RSS feeds kan ophalen
  traefik:
    external: true
