---
description: Principles of modular programming for the entire project.
globs: src/\*_/_.py
alwaysApply: false
---

# Modular Programming Guidelines

## General Principles

- Break down code into separate, interchangeable modules.
- Each module should focus on one aspect of functionality (Single Responsibility Principle).
- Avoid copying code across files; create reusable modules and import them as needed.
- Ensure modules have high cohesion (functions within a module should be closely related).
- Minimize coupling between modules by using well-defined interfaces or abstractions.

## For Python Code

- Organize Python code into logical modules or packages.
- Use helper functions or utility modules for reusable logic.
- Follow Python's import conventions to avoid circular dependencies.
- Document each module with clear docstrings explaining its purpose and usage.

## For Prefect Workflows

- Break workflows into smaller tasks that can be reused across different flows.
- Use Prefect's task libraries for common operations instead of duplicating logic.
- Keep configuration (e.g., retries, timeouts) modular by defining it at the task or flow level.

## For Frontend Code (Chat-UI)

- Use React's component-based architecture to create self-contained, reusable components.
- Organize components into directories based on their role (e.g., `components/`, `hooks/`).
- Use custom hooks to encapsulate reusable logic (e.g., API calls, state management).
- Keep styling modular by using scoped CSS (e.g., TailwindCSS classes) or CSS-in-JS solutions.
